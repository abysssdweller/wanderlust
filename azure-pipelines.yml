trigger:
- devops

pool:
  name: Default

variables:
  SONARQUBE_PROJECT_KEY: 'wanderlust_project_key'
  SONARQUBE_SERVICE_CONNECTION: 'azuzu' # Replace with your service connection name
  DOCKER_REGISTRY_SERVICE: 'dokuku' # Replace with your Docker registry service connection
  NODE_ENV: 'production'
  SONAR_HOME: '/opt/sonarqube/bin' # Adjust based on agent configuration

steps:
# Step 1: Install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'

# Step 2: Install Dependencies and Run Tests
- script: |
    npm install
    npm run test
  displayName: 'Install Dependencies and Run Tests'

# Step 3: Prepare SonarQube Analysis
- task: SonarQubePrepare@5
  inputs:
    SonarQube: '$(SONARQUBE_SERVICE_CONNECTION)'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
    cliSources: '.'
    extraProperties: |
      sonar.exclusions=**/node_modules/**,**/*.spec.ts
      sonar.typescript.lcov.reportPaths=coverage/lcov.info
  displayName: 'Prepare SonarQube Analysis'

# Step 4: Run SonarQube Analysis
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube Analysis'

# Step 5: Publish SonarQube Quality Gate Results
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube Quality Gate Results'

# Step 6: Build and Deploy with Docker Compose
- script: |
    docker-compose up -d
  displayName: 'Deploy Using Docker Compose'

# Step 7: Login to Docker Registry
- task: Docker@2
  inputs:
    containerRegistry: '$(DOCKER_REGISTRY_SERVICE)'
    command: 'login'
  displayName: 'Login to Docker Registry'

# Step 8: Build and Push Docker Image
- task: Docker@2
  inputs:
    containerRegistry: '$(DOCKER_REGISTRY_SERVICE)'
    repository: 'wanderlust'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
  displayName: 'Build and Push Docker Image'

# Step 9: Security Scan Docker Image
- script: |
    docker scan wanderlust:latest --file ./Dockerfile
  displayName: 'Scan Docker Image for Vulnerabilities'

# Step 10: Publish Test Results
- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results/*.xml'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'

# Step 11: Publish Code Coverage Results
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: 'coverage/lcov.info'
  displayName: 'Publish Code Coverage Results'
